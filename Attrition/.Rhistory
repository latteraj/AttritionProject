mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
NewXGB.prd <- predict(XGB.model,BLtest.Data)
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
XGB.plot <- plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
set.seed(1000)
xgbData <- BalancedData
indexes = sample(1:nrow(xgbData), size=0.8*nrow(xgbData))
BLtrain.Data <- xgbData[indexes,]
BLtest.Data <- xgbData[-indexes,]
formula = Attrition~.
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 500,
max_depth = 20,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model = train(formula, data = BLtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
,na.action = na.pass
)
importance <- varImp(XGB.model)
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
NewXGB.prd <- predict(XGB.model,BLtest.Data)
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
set.seed(123)
xgbData <- BalancedData
indexes = sample(1:nrow(xgbData), size=0.8*nrow(xgbData))
BLtrain.Data <- xgbData[indexes,]
BLtest.Data <- xgbData[-indexes,]
formula = Attrition~.
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 500,
max_depth = 20,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model = train(formula, data = BLtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
,na.action = na.pass
)
importance <- varImp(XGB.model)
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
NewXGB.prd <- predict(XGB.model,BLtest.Data)
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
set.seed(143)
xgbData <- BalancedData
indexes = sample(1:nrow(xgbData), size=0.8*nrow(xgbData))
BLtrain.Data <- xgbData[indexes,]
BLtest.Data <- xgbData[-indexes,]
formula = Attrition~.
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 500,
max_depth = 20,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model = train(formula, data = BLtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
,na.action = na.pass
)
importance <- varImp(XGB.model)
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
NewXGB.prd <- predict(XGB.model,BLtest.Data)
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
XGB.plot <- plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
par(mfrow=c(2,3))
plot.roc (as.numeric(XGBtest.Data$Attrition), as.numeric(XGB.prd),main="XGBoost",lwd=2, type="b", print.auc=TRUE, col ="blue")
plot.roc (as.numeric(DTtest.Data$Attrition), as.numeric(dtree.prd), main="DTree",lwd=2, type="b", print.auc=TRUE, col ="brown")
plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),main="New XGBoost",lwd=2, type="b", print.auc=TRUE, col ="green")
plot.roc (as.numeric(SVMtest.Data$Attrition), as.numeric(svm.prd),main="SVM",lwd=2, type="b", print.auc=TRUE, col ="red")
plot.roc (as.numeric(RFRaw.test.Data$Attrition), as.numeric(Raw.rf.prd), main="Random Forest",lwd=2, type="b", print.auc=TRUE, col ="seagreen4")
plot.roc (as.numeric(RFtest.Data$Attrition), as.numeric(rf.prd), main="Raw Data Random Forest",lwd=2, type="b", print.auc=TRUE, col ="seagreen")
install.packages("Rserve")
install.packages("Rserve")
library(Rserve)
Rserve()
library(tidyverse)
library(data.table)
library(VIM)
library(DT)
library(gridExtra)
library(caret)
library(Metrics)
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(corrplot)
library(DMwR)
library(tree)
setwd("D:/Imarticus Projects/RProject-Attrition/R Project - Attrition")
attrition = fread("Attrition.csv", sep = ",", header = TRUE, stringsAsFactors = T)
glimpse(attrition)
summary(attrition)
colnames(attrition)
colSums(is.na(attrition))
VIM::aggr(attrition)
attrition$EmployeeNumber <- NULL
attrition$StandardHours <- NULL
attrition$Over18 <- NULL
attrition$EmployeeCount <- NULL
cat("Data Set has ",dim(attrition)[1], " Rows and ", dim(attrition)[2], " Columns" )
sum (is.na(duplicated(attrition)))
attrition$Education <- as.factor(attrition$Education)
attrition$EnvironmentSatisfaction <- as.factor(attrition$EnvironmentSatisfaction)
attrition$JobInvolvement <- as.factor(attrition$JobInvolvement)
attrition$JobLevel <- as.factor(attrition$JobLevel)
attrition$JobSatisfaction <- as.factor(attrition$JobSatisfaction)
attrition$PerformanceRating <- as.factor(attrition$PerformanceRating)
attrition$RelationshipSatisfaction <- as.factor(attrition$RelationshipSatisfaction)
attrition$StockOptionLevel <- as.factor(attrition$StockOptionLevel)
attrition$WorkLifeBalance <- as.factor(attrition$WorkLifeBalance)
attrition %>%
group_by(Attrition) %>%
tally() %>%
ggplot(aes(x = Attrition, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Attrition", y="Attriation Counts")+
ggtitle("Attrition Vizualization")+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
ggplot(data=attrition, aes(attrition$Age)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="blue",
aes(fill=..count..))+
labs(x="Age", y="Count")+
scale_fill_gradient("Count", low="red", high="green")
attrition %>%
group_by(BusinessTravel) %>%
tally() %>%
ggplot(aes(x = BusinessTravel, y = n,fill=BusinessTravel)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Business Travel", y="Attriation Number")+
ggtitle("Attrition according to the Business Travel")+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
attrition %>%
group_by(BusinessTravel, Attrition) %>%
tally() %>%
ggplot(aes(x = BusinessTravel, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Business Travel", y="Attriation Number")+
ggtitle("Attrition according to the Business Travel")+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
attrition %>%
ggplot(aes(x = BusinessTravel, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = 2) +
labs(y = "Percentage", fill= "business Travel") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
labs(x="Business Travel", y="Percentage")+
ggtitle("Attrition")
attrition %>%
group_by(Department) %>%
tally() %>%
ggplot(aes(x = Department, y = n,fill=Department)) +
geom_bar(stat = "identity") +
theme_minimal()+
geom_text(aes(label = n), vjust = -0.1, position = position_dodge(0.9))
attrition %>%
group_by(Department, Attrition) %>%
tally() %>%
ggplot(aes(x = Department, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
geom_text(aes(label = n), vjust = -0.1, position = position_dodge(0.9))
attrition %>%
ggplot(aes(x = Education, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = 2) +
labs(y = "Percentage", fill= "Education") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
attrition %>%
group_by(Education, Attrition) %>%
tally() %>%
ggplot(aes(x = Education, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))+
labs(x="Education", y="Attriation Number")+
ggtitle("Attrition in regards to Education Level")
attrition %>%
ggplot(aes(x = Gender, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = -.5) +
labs(y = "Percentage", fill= "Gender") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
attrition %>%
ggplot(aes(x = MaritalStatus, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = -.5) +
labs(y = "Percentage", fill= "MaritalStatus") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
attrition %>%
ggplot(mapping = aes(x = MonthlyIncome)) +
geom_histogram(aes(fill = Attrition), bins=20)+
labs(x="Monthly Income", y="Attriation Number")+
ggtitle("Attrition with regards to Monthly Income")
attrition %>%
ggplot(aes(x = OverTime, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = 0.3) +
labs(y = "Percentage", fill= "OverTime") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.3)) +
ggtitle("Attrition")
attrition %>%
group_by(OverTime, Attrition) %>%
tally() %>%
ggplot(aes(x = OverTime, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
geom_text(aes(label = n), vjust = -0.3, position = position_dodge(0.9))+
labs(x="Over time", y="Attriation Number")+
ggtitle("Attrition with regards to Over time")
attrition%>%
ggplot(aes(x = WorkLifeBalance, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = -.5) +
labs(x = "Work Life Balance",y = "Percentage", fill= "WorkLifeBalance") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
attrition %>%
group_by(WorkLifeBalance, Attrition) %>%
tally() %>%
ggplot(aes(x = WorkLifeBalance, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))+
labs(x="  Work Life Balance", y="Attriation Number")+
ggtitle("Attrition with regards to  Work Life Balance")
rfData <- attrition
set.seed(123)
indexes = sample(1:nrow(rfData), size=0.8*nrow(rfData))
RFRaw.train.Data <- rfData[indexes,]
RFRaw.test.Data <- rfData[-indexes,]
Raw.rf.model <- randomForest(Attrition~.,RFRaw.train.Data, importance=TRUE,ntree=1000)
varImpPlot(Raw.rf.model)
Raw.rf.prd <- predict(Raw.rf.model, newdata = RFRaw.test.Data)
confusionMatrix(RFRaw.test.Data$Attrition, Raw.rf.prd)
Raw.rf.plot<- plot.roc(as.numeric(RFRaw.test.Data$Attrition), as.numeric(Raw.rf.prd),lwd=2, type="b",print.auc=TRUE,col ="blue")
attrition$AgeGroup <- as.factor(
ifelse(attrition$Age<=24,"Young", ifelse(
attrition$Age<=54,"Middle-Age","Adult"
))
)
table(attrition$AgeGroup)
attrition$TotlaSatisfaction <-
as.numeric(attrition$EnvironmentSatisfaction)+
as.numeric(attrition$JobInvolvement)+
as.numeric(attrition$JobSatisfaction)+
as.numeric(attrition$RelationshipSatisfaction)+
as.numeric(attrition$WorkLifeBalance)
summary(attrition$TotlaSatisfaction)
table(attrition$Education)
attrition$YearsEducation <-  ifelse(attrition$Education==1,10,ifelse(attrition$Education==2,12,
ifelse(attrition$Education==3,16,ifelse(attrition$Education==4,18,22))))
table(attrition$YearsEducation)
attrition$IncomeLevel <- as.factor(
ifelse(attrition$MonthlyIncome<ave(attrition$MonthlyIncome),"Low","High")
)
table(attrition$IncomeLevel)
corrplot(cor(sapply(attrition,as.integer)),method = "pie")
rfData <- attrition
set.seed(123)
indexes = sample(1:nrow(rfData), size=0.8*nrow(rfData))
RFtrain.Data <- rfData[indexes,]
RFtest.Data <- rfData[-indexes,]
rf.model <- randomForest(Attrition~.,RFtrain.Data, importance=TRUE,ntree=500)
varImpPlot(rf.model)
rf.prd <- predict(rf.model, newdata = RFtest.Data)
confusionMatrix(RFtest.Data$Attrition, rf.prd)
rf.Plot<- plot.roc (as.numeric(RFtest.Data$Attrition), as.numeric(rf.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
svmData <- attrition
set.seed(123)
indexes = sample(1:nrow(svmData), size=0.8*nrow(svmData))
SVMtrain.Data <- svmData[indexes,]
SVMtest.Data <- svmData[-indexes,]
tuned <- tune(svm,factor(Attrition)~.,data = SVMtrain.Data)
svm.model <- svm(SVMtrain.Data$Attrition~., data=SVMtrain.Data
,type="C-classification", gamma=tuned$best.model$gamma
,cost=tuned$best.model$cost
,kernel="radial")
svm.prd <- predict(svm.model,newdata=SVMtest.Data)
confusionMatrix(svm.prd,SVMtest.Data$Attrition)
svm.plot <-plot.roc (as.numeric(SVMtest.Data$Attrition), as.numeric(svm.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
DtData <- attrition
set.seed(123)
indexes = sample(1:nrow(DtData), size=0.8*nrow(DtData))
DTtrain.Data <- DtData[indexes,]
DTtest.Data <- DtData[-indexes,]
dtree.model <- tree::tree (Attrition ~., data = DTtrain.Data)
plot(dtree.model)
text(dtree.model, all = T)
dtree.prd <- predict(dtree.model, DTtest.Data, type = "class")
confusionMatrix(dtree.prd,DTtest.Data$Attrition)
dtree.plot <- plot.roc (as.numeric(DTtest.Data$Attrition), as.numeric(dtree.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
set.seed(123)
xgbData <- attrition
indexes <- sample(1:nrow(xgbData), size=0.8*nrow(xgbData))
XGBtrain.Data <- xgbData[indexes,]
XGBtest.Data <- xgbData[-indexes,]
formula = Attrition~.
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 50,
max_depth = 12,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model <- train(formula, data = XGBtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
)
importance <- varImp(XGB.model)
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
# Create a rank variable based on importance of variables
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
XGB.prd <- predict(XGB.model,XGBtest.Data)
confusionMatrix(XGB.prd, XGBtest.Data$Attrition)
XGB.plot <- plot.roc (as.numeric(XGBtest.Data$Attrition), as.numeric(XGB.prd),lwd=2, type="b", print.auc=TRUE,col ="blue")
Classcount = table(attrition$Attrition)
# Over Sampling
over = ( (0.6 * max(Classcount)) - min(Classcount) ) / min(Classcount)
# Under Sampling
under = (0.4 * max(Classcount)) / (min(Classcount) * over)
over = round(over, 1) * 100
under = round(under, 1) * 100
#Generate the balanced data set
BalancedData = SMOTE(Attrition~., attrition, perc.over = over, k = 5, perc.under = under)
# let check the output of the Balancing
BalancedData %>%
group_by(Attrition) %>%
tally() %>%
ggplot(aes(x = Attrition, y = n,fill=Attrition)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Attrition", y="Attriation Count")+
ggtitle("Attrition")+
geom_text(aes(label = n), vjust = -0.5, position = position_dodge(0.9))
set.seed(153)
xgbData <- BalancedData
indexes = sample(1:nrow(xgbData), size=0.8*nrow(xgbData))
BLtrain.Data <- xgbData[indexes,]
BLtest.Data <- xgbData[-indexes,]
formula = Attrition~.
fitControl <- trainControl(method="cv", number = 3,classProbs = TRUE )
xgbGrid <- expand.grid(nrounds = 500,
max_depth = 20,
eta = .03,
gamma = 0.01,
colsample_bytree = .7,
min_child_weight = 1,
subsample = 0.9
)
XGB.model = train(formula, data = BLtrain.Data,
method = "xgbTree"
,trControl = fitControl
, verbose=0
, maximize=FALSE
,tuneGrid = xgbGrid
,na.action = na.pass
)
importance <- varImp(XGB.model)
varImportance <- data.frame(Variables = row.names(importance[[1]]),
Importance = round(importance[[1]]$Overall,2))
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance)) +
geom_bar(stat='identity',colour="white", fill = "lightgreen") +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Variables', title = 'Relative Variable Importance') +
coord_flip() +
theme_bw()
NewXGB.prd <- predict(XGB.model,BLtest.Data)
confusionMatrix(NewXGB.prd, BLtest.Data$Attrition)
XGB.plot <- plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),lwd=2, type="b", print.auc=TRUE, col ="blue")
par(mfrow=c(2,3))
plot.roc (as.numeric(XGBtest.Data$Attrition), as.numeric(XGB.prd),main="XGBoost",lwd=2, type="b", print.auc=TRUE, col ="blue")
plot.roc (as.numeric(DTtest.Data$Attrition), as.numeric(dtree.prd), main="DTree",lwd=2, type="b", print.auc=TRUE, col ="brown")
plot.roc (as.numeric(BLtest.Data$Attrition), as.numeric(NewXGB.prd),main="New XGBoost",lwd=2, type="b", print.auc=TRUE, col ="green")
plot.roc (as.numeric(SVMtest.Data$Attrition), as.numeric(svm.prd),main="SVM",lwd=2, type="b", print.auc=TRUE, col ="red")
plot.roc (as.numeric(RFRaw.test.Data$Attrition), as.numeric(Raw.rf.prd), main="Random Forest",lwd=2, type="b", print.auc=TRUE, col ="seagreen4")
plot.roc (as.numeric(RFtest.Data$Attrition), as.numeric(rf.prd), main="Raw Data Random Forest",lwd=2, type="b", print.auc=TRUE, col ="seagreen")
